#include "./UUPSUpgradeable.huff"

/* Interface */
#define function setValue(uint256) nonpayable returns ()
#define function getValue() view returns (uint256)
#define function upgrade(address newImpl) payable returns ()
#define function initialize(address admin) nonpayable returns ()
#define function getImpl() view returns (address) //used in test

#define function proxiableUUID() view returns (bytes32) //ADD

/* Storage Slots */
#define constant VALUE_LOCATION = FREE_STORAGE_POINTER()
#define constant OWNER_SLOT = FREE_STORAGE_POINTER()

/* Errors */
#define error NOT_OWNER()
#define error INITIALIZED()
/**
 * @dev CHECKS OWNER AND UPGRADES
 */
#define macro UPGRADE() = takes(0) returns(0) {
    [OWNER_SLOT] sload
    caller eq iszero revertTx jumpi

    0x04 calldataload           //[newImplAddr]
    updateCodeAddress()
    0x00 0x00 return

    revertTx:
        __ERROR(NOT_OWNER)
        0x04 0x00 revert
}

/* Methods */
#define macro SET_VALUE() = takes (0) returns (0) {
    0x04 calldataload   // [value]
    [VALUE_LOCATION]    // [ptr, value]
    sstore              // []
    0x00 0x00 return
}

#define macro GET_VALUE() = takes (0) returns (0) {
    // Load value from storage.
    [VALUE_LOCATION]   // [ptr]
    sload                // [value]

    // Store value in memory.
    0x00 mstore

    // Return value
    0x20 0x00 return
}

#define macro GET_IMPL() = takes(0) returns(0) {
    0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7
    sload
    0x00 mstore
    0x20 0x00 return
}

#define macro INITIALIZE() = takes(0) returns(0) {
    // Set admin to this address.
    [OWNER_SLOT] sload
    0x0
    eq continue jumpi 
    __ERROR(INITIALIZED)
    0x00 mstore
    0x04 0x00 revert

    continue:
        0x04 calldataload
        [OWNER_SLOT]
        sstore
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 0x55241077 eq set jumpi
    dup1 0x20965255 eq get jumpi
    dup1 __FUNC_SIG(initialize) eq initialize jumpi
    dup1 __FUNC_SIG(getImpl) eq getImpl jumpi
    dup1 __FUNC_SIG(upgrade) eq upgrade jumpi   //ADD
    dup1 __FUNC_SIG(proxiableUUID) eq proxiableUUID jumpi   //ADD



    0x00 0x00 revert

    set:
        SET_VALUE()
    get:
        GET_VALUE()
    getImpl:
        GET_IMPL()
    proxiableUUID: //ADD
        PROXIABLE_UUID()
    upgrade:
        UPGRADE()
    initialize:
       INITIALIZE() 

}
